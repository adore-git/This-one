拦截器主要用来增强 handler 方法

拦截器的接口有两个，定义拦截器就是实现他们之一

HandlerInterceptor 参数比较多，能够更全面控制拦截行为
WebRequestInterceptor 针对 Web 请求精简了参数列表，主要用来控制 request/ModelAndView/Exception
主要实现以下三个方法:

preHandler() 在执行 Controller 相应 handler 之前要执行
postHandler() 执行完 handler，进入 render 页面渲染前的阶段执行
afterCompletion() 所有的东西都做完，退出前执行。主要用来做一些清理工作
下面是例子:

定义

// 实现 HandlerInterceptor 接口的形式
public class MyInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        // 在调用 handler 之前被调用
        // 如果返回 true，继续下面的流程，如果返回 false，直接跳转到 afterComplete 中止运行。
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        // 在调用完 handler 得到封装好的 ModelAndView 之后，渲染页面前被调用
        // 在这里，可以对 ModelAndView 里的数据作出自己的修改等
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        // 在最后的清理阶段被调用
        // 在这里，进行善后操作。
    }
}


// 实现 WebRequestInterceptor 接口的形式
public class HisInterceptor implements WebRequestInterceptor {
    @Override
    public void preHandle(WebRequest request) throws Exception {
        System.out.println("pre");
    }

    @Override
    public void postHandle(WebRequest request, ModelMap model) throws Exception {
        System.out.println(model);
    }

    @Override
    public void afterCompletion(WebRequest request, Exception ex) throws Exception {
        System.out.println(ex);
    }
}

注册

<mvc:interceptors>
  <!-- 全局拦截器 -->
  <bean class="fish.miniblog.interceptor.YourInterceptor" />
  <bean class="fish.miniblog.interceptor.MyInterceptor" />

  <!-- 作用于指定映射的拦截器 -->
  <mvc:interceptor>
    <!-- 为所有 /users/** 请求配置拦截器 -->
    <mvc:mapping path="/users/**"/>
    <bean class="fish.miniblog.interceptor.HisInterceptor" />
  </mvc:interceptor>

</mvc:interceptors>
然后，就这样了。
