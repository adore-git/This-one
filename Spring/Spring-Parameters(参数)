Parameters

基本类型的自动绑定

会根据 handler 参数列表中的字段名字，自动绑定数据

如果参数没有被赋值，默认会尝试将 null 赋予它。所以对于一些 int 之类的类型，会抛出 IllegalStateException 异常。

集合类型的自动绑定

对象的自动封装

<!-- form -->
<form action="/greeting">
  <input type="text" name="name" placeholder="请输入名字" />
  <input type="text" name="age" placeholder="请输入年龄" />
  <input type="submit">
</form>
// handler
@RequestMapping("/greeting")
public String greeting(User user) {
    return "greeting";
}

// model
Class User {
    private String name;
    private int age;
}
HttpSession/HttpServletRequest 等的自动绑定

public String greeting(HttpServletRequest r, HttpSession s)
@RequestParam

定制入参的名字和默认值等

public String greeting(@RequestParam(name = "username", defaultValue = "xyz") String name)
@RequestAttribute

将 request 的某个 Attribute 值，赋予 handler 参数

public String greeting(@RequestAttribute(name = "name") String name)
@CookieValue

用来绑定 cookie 中的值

@RequestHeader

绑定 http 请求头部的信息到参数中

public String greeting(@RequestHeader(name = "user-agent") String ua)
@PathVariable

绑定 url 中匹配的串到参数中，用 {} 匹配

@RequestMapping("/greeting/{id}")
public String greeting(@PathVariable int id)
@RequestBody

将 http 请求 body 里的数据自动转换并绑定到参数。

@ResponseBody

忽略头部，直接将内容作为响应体返回。

示例：

$("#showmsg").click(function () {
    d = {"name": "xiaohui", "age": 9};
    $.ajax({
        method: 'post',
        url: '/greeting',
        data: JSON.stringify(d),
        contentType: 'application/json',
        success: function (o) {
            console.log(o);  // 得到的是 json 对象
            alert(eee.age);
            alert(eee.name);
        }
    });
});
UserController:

@RequestMapping("/greeting")
@ResponseBody
public User greeting(@RequestBody User user) {
    System.out.println("又过了一个新年！");
    int age = user.getAge();
    user.setAge(age + 1);
    return user;
}
@SessionAttribute

@ModelAttribute

Errors/BindingResult

用来绑定出错的信息

Model/View/ModelAndView

请求流程

当请求被 DispatcherServlet 拦截，会在 doService 里面完成所有的处理逻辑。

处理的大致流程是这样的：

预处理
根据请求的 URL 通过 HandlerMapping 获取匹配的 Controller 和 handler
创建 ModelAndView 对象，这个对象将会保存所有的模型数据，还会持有页面展现相关的信息
ModelAndView mv = null
    
调用相应的 handler 方法，将结果封装成 ModelAndView 赋值给 mv。
调用 render 方法，将 Model 里的数据渲染到 View 视图里
清理工作
所以我们需要明白，我们的 handler 最终产生的应该是一个保存了数据和视图的 ModelAndView。 即使我们的 handler 返回类型是字符串或其他，到最后还是被封装成了 ModelAndView。

而且在封装 ModelAndView 时，会将 handler 参数列表上的数据自动添加到里面。

我们可以在 jsp 里，对 ModelAndView 里的所有数据通过 el 表达式或 spring 标签进行获取。
