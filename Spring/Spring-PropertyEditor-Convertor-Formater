PropertyEditor/Convertor/Formater(日期转换为例)

第一种方法：利用内置的 CustomDateEditor

首先，在我们的 Controller 的 InitBinder 里面，注册 CustomEditor

@InitBinder
public void init (WebDataBinder binder) {
    CustomDateEditor dateEditor = new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"), true);
    binder.registerCustomEditor(Date.class, dateEditor);                                );
}
然后，就可以正常转换了。

第二种方法：实现自定义转换器

spring 3.0 之后，使用 converter

public class MyDateConverter implements Converter<String, Date> {
    public Date convert(String datestr) {
        // 自己去实现，将字符串转换为 Date 对象。
        // 注意考虑异常处理等
        return null;
    }
}
然后需要在配置文件中注册转换器

<!-- 配置我们定义的转换服务 -->
<mvc:annotation-driven conversion-service="myConversionService" />

<!-- 定义全局的转换服务，可以配置多个转换器 -->
<!-- 在这里，只配置了我们自定义的转换器，DateConverter -->
<bean name="myConversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
  <property name="converters">
    <set>
      <bean class="fish.miniblog.converter.MyDateConverter" />
    </set>
  </property>
</bean>
这样就可以了。所有的 yyyy-MM-yy 之类的字符串就可以正常转换成 Date 对象了。

第三种方法：使用 @DateTimeFormat 注解

在 model 上，增加相应注解：

class User {
  @DateTimeFormat(pattern = "yyyy-MM-dd")
  private Date birthday;
}
就可以了。

另外，如果想让返回的 JSON 对象中能够准确处理时间类型，需要用到 @JsonFormat 注解

日期在页面上的显示
